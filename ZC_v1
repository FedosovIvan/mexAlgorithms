#include "mex.h"
#include <stdio.h>
#include <math.h>

double dt = 0;
double dt_rc = 0;
double dt_lc = 0;


double f = 0;
double f_raw = 0;
double f_left = 0;
double f_right = 0;
double f_central = 0;
double dphi = 0;
double dphi_rc = 0;

int chislo_perehodov = 0;


double ampl_left = 0;
double ampl_right = 0;

//ADC constants
double sampling_frequency = 48000;
double sampling_rate = 2.083333333e-5;

//Calculation signal parameters (dt, f, dphi, A1, A2)
void calculation_parameters(double time_jumps[][6], int number_of_jumps, double sampling_rate, double sampling_frequency)
{
		
	int idx_amplitude = 0;				
	double sum = 0;
	int smooth_ampl = 10;

	switch (number_of_jumps)
	{
	case 1: //if 1 crossing in left and right
				
		dt = (time_jumps[1][0] - time_jumps[1][1]);
		dt_rc = (time_jumps[1][2] - time_jumps[1][1]);
		dt_lc = (time_jumps[1][0] - time_jumps[1][2]);



		f_left = 1 / (2 * (time_jumps[1][0] - time_jumps[0][0]));
		f_right = 1 / (2 * (time_jumps[1][1] - time_jumps[0][1]));
		f_central = 1 / (2 * (time_jumps[1][2] - time_jumps[0][2]));
		
		f_raw = (f_left + f_right) / 2; //frequency at counts
		f = f_raw;
		dphi = dt * f * 360;


		break;

	case 2:
		
		dt = (time_jumps[2][0] - time_jumps[2][1]);
		dt_rc = (time_jumps[2][2] - time_jumps[2][1]);
		dt_lc = (time_jumps[2][0] - time_jumps[2][2]);


		f_left = 1 / (2 * (time_jumps[2][0] - time_jumps[1][0]));
		f_right = 1 / (2 * (time_jumps[2][1] - time_jumps[1][1]));
		f_central = 1 / (2 * (time_jumps[2][2] - time_jumps[1][2]));
		
		f_raw = (f_left + f_right) / 2; //frequency at counts
		f = f_raw;
		dphi = dt * f * 360;

		
		break;

	case -1:

		dt = 0;
		dt_rc = 0;
		dt_lc = 0;
		f_left = 0;
		f_right = 0;
		f_central = 0;
		f_raw = 0;
		f = 0;
		dphi = 0;
		
		break;

	case -2:
		
		dt = 0;
		dt_rc = 0;
		dt_lc = 0;
		f_left = 0;
		f_right = 0;
		f_central = 0;
		f_raw = 0;
		f = 0;
		dphi = 0;
		break;

	default:
		break;
	}

}

void zero_crossing(double *signals, int signals_length, int signals_width, int *window)
{	
				double crossing_points_left[10][3] = { 0 };		
				double crossing_points_right[10][3] = { 0 };	
				double crossing_points_central[10][3] = { 0 };	

				int crossing_points_length = 10;
				int length_cpl = 0;
				int length_cpr = 0;
				int length_cpc =0;

				int k = 1; //counter
				int k1 = 1;
				int k2 = 1;
				int k3 = 1;


				double time_jumps[10][6] = { 0 };

				//printf("window = %d\n", *window);

				//Detecting pair of points of zero-crossing
				for (int i = 1; i < *window; i++)
				{
					
					//for left channel
					//if ((*(signals + 3*signals_length + i) * *(signals + 3*signals_length + i-1)) < 0) //equivalent without using signbit() function (from math.h)
					if ((signbit(*(signals + 3*signals_length + i)) != signbit(*(signals + 3*signals_length + i-1)))) 

					{		
						int n = 1;
						while (n > -1)
						{
							crossing_points_left[k1 - n][0] = *(signals + 0 + i-n);
							crossing_points_left[k1 - n][1] = *(signals + 3*signals_length + i-n);
							crossing_points_left[k1 - n][2] = i - n;
							n--;
						}

						/*printf("-------------------left--------------------\n");
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_left[k1 - 1][0], crossing_points_left[k1 - 1][2], crossing_points_left[k1 - 1][1]);
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_left[k1][0], crossing_points_left[k1][2], crossing_points_left[k1][1]);
						printf("--------------------------------------------\n");*/

						length_cpl += 2;
						k1 += 2;

						if (length_cpl == crossing_points_length)
						{
							break;
						}
					}

					//for right channel
					//if ((*(signals + 4*signals_length + i) * *(signals + 4*signals_length + i-1)) < 0)
					if ((signbit(*(signals + 4*signals_length + i)) != signbit(*(signals + 4*signals_length + i-1))))

					{		
						int n = 1;
						while (n > -1)
						{
							crossing_points_right[k2 - n][0] = *(signals + 0 + i-n);
							crossing_points_right[k2 - n][1] = *(signals + 4*signals_length + i-n);
							crossing_points_right[k2 - n][2] = i - n;
							n--;
						}
						
						/*printf("-------------------right-------------------\n");
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_right[k2 - 1][0], crossing_points_right[k2 - 1][2], crossing_points_right[k2 - 1][1]);
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_right[k2][0], crossing_points_right[k2][2], crossing_points_right[k2][1]);
						printf("--------------------------------------------\n");*/

						length_cpr += 2;
						k2 += 2;

						if (length_cpr == crossing_points_length)
						{
							break;
						}
					}

					//for central channel
					//if ((*(signals + 2*signals_length + i) * *(signals + 2*signals_length + i-1)) < 0)
					if ((signbit(*(signals + 2*signals_length + i)) != signbit(*(signals + 2*signals_length + i-1))))

					{		
						int n = 1;
						while (n > -1)
						{
							crossing_points_central[k3 - n][0] = *(signals + 0 + i-n);
							crossing_points_central[k3 - n][1] = *(signals + 2*signals_length + i-n);
							crossing_points_central[k3 - n][2] = i - n;
							n--;
						}
						
						/*printf("-----------------central-------------------\n");
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_central[k3 - 1][0], crossing_points_central[k3 - 1][2], crossing_points_central[k3 - 1][1]);
						printf("%2.8lf\t %2.8lf\t %2.8lf\n", crossing_points_central[k3][0], crossing_points_central[k3][2], crossing_points_central[k3][1]);
						printf("--------------------------------------------\n");*/

						length_cpc += 2;
						k3 += 2;

						if (length_cpc == crossing_points_length)
						{
							break;
						}
					}
				}


				/*Calculating time of zero-crossing*/
				k = 1;
				int i_left = 1; 

				while (k < length_cpl)
				{
					double coeff_k = 0;
					double coeff_b = 0;

					coeff_k = (double)(crossing_points_left[k][1] - crossing_points_left[k - 1][1]) / (double)(crossing_points_left[k][0] - crossing_points_left[k - 1][0]);
					coeff_b = ((double)crossing_points_left[k - 1][1] * (double)crossing_points_left[k][0] - (double)crossing_points_left[k][1] * (double)crossing_points_left[k - 1][0]) / (double)(crossing_points_left[k][0] - crossing_points_left[k - 1][0]);

					time_jumps[i_left][0] = (-1) * (coeff_b / coeff_k);
					time_jumps[i_left][3] = (double)crossing_points_left[k - 1][2]; //local index for filtering
				
					k += 2;
					i_left++;
				}
				
		
				k = 1;
				int i_right = 1;
				
				while (k < length_cpr)
				{
					double coeff_k = 0;
					double coeff_b = 0;

					coeff_k = (double)(crossing_points_right[k][1] - crossing_points_right[k - 1][1]) / (double)(crossing_points_right[k][0] - crossing_points_right[k - 1][0]);
					coeff_b = ((double)crossing_points_right[k - 1][1] * (double)crossing_points_right[k][0] - (double)crossing_points_right[k][1] * (double)crossing_points_right[k - 1][0]) / (double)(crossing_points_right[k][0] - crossing_points_right[k - 1][0]);

					time_jumps[i_right][1] = (-1) * (coeff_b / coeff_k);
					time_jumps[i_right][4] = (double)crossing_points_right[k - 1][2]; //local index for filtering

					k += 2;
					i_right++;
				}

				k = 1;
				int i_central = 1;
				
				while (k < length_cpc)
				{
					double coeff_k = 0;
					double coeff_b = 0;

					coeff_k = (double)(crossing_points_central[k][1] - crossing_points_central[k - 1][1]) / (double)(crossing_points_central[k][0] - crossing_points_central[k - 1][0]);
					coeff_b = ((double)crossing_points_central[k - 1][1] * (double)crossing_points_central[k][0] - (double)crossing_points_central[k][1] * (double)crossing_points_central[k - 1][0]) / (double)(crossing_points_central[k][0] - crossing_points_central[k - 1][0]);

					time_jumps[i_central][2] = (-1) * (coeff_b / coeff_k);
					time_jumps[i_central][5] = (double)crossing_points_central[k - 1][2]; //local index for filtering

					k += 2;
					i_central++;
				}

				printf("--------------Time_jumps------------------------\n");
				for (int i = 0; i < 10; i++)
				{
					for (int j = 0; j < 6; j++)
					{
						printf("%lf\t", time_jumps[i][j]);
					}
					printf("\n");
				}
				printf("------------------------------------------------\n");

				//Detecting maximal effective length of time_jumps
				int limit = 0;
				limit = fmax(fmax(i_left, i_right), i_central);
				printf("Limit = %d\n", limit);

				// Calculation parameters

				//if 1 crossing in left and right
				if ((i_left - 1 == 1) && (i_right - 1 == 1))
				{
					int num_jumps = 1;

					calculation_parameters(time_jumps, num_jumps, sampling_rate, sampling_frequency);

					for (int i = 0; i < 6; i++)
					{
						time_jumps[0][i] = time_jumps[1][i];
						time_jumps[1][i] = 0;
					}

					chislo_perehodov = 1;
				}

				//if 2 crossings in left and right
				if ((i_left - 1 == 2) && (i_right - 1 == 2))
				{
					int num_jumps = 2;

					calculation_parameters(time_jumps, num_jumps, sampling_rate, sampling_frequency);

					for (int i = 0; i < 6; i++)
					{
						time_jumps[0][i] = time_jumps[2][i];
						time_jumps[1][i] = 0;
						time_jumps[2][i] = 0;
					}

					chislo_perehodov = 2;
				}
}



/* The gateway function */
void mexFunction (int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
{
    double *signals;
    int window;

    int signals_length;
    int signals_width;              


    /* check for proper number of arguments */
    if(nrhs!=2) {
        mexErrMsgIdAndTxt("MyToolbox:arrayProduct:nrhs","One inputs required.");
    }
    // if(nlhs!=1) {
    //     mexErrMsgIdAndTxt("MyToolbox:arrayProduct:nlhs","One output required.");
    // }
    
    /* create a pointer to an input buffer  */
    signals = mxGetPr(prhs[0]);

    /* get dimensions of the input matrix */
    signals_length = mxGetM(prhs[0]);
    signals_width = mxGetN(prhs[0]);

    /* get current index of a new point at the buffer */
    window = mxGetScalar(prhs[1]);
    
    /* create an output buffer */
    //plhs[0] = mxCreateDoubleMatrix((int)filter_length, (int)buf_length, mxREAL);

    /* get a pointer to the real data in the output matrix */
    //filt_buf_clear = mxGetPr(plhs[0]);

    /* call the ZC */
    zero_crossing (signals, signals_length, signals_width, &window);

    printf("-----------------Parameters----------------\n");
	printf("dt = %2.10lf\t dt_rc = %2.10lf\t dt_lc = %2.10lf\n", dt, dt_rc, dt_lc);
	printf("f_left = %lf\t f_right = %lf\t f_central = %lf\n", f_left, f_right, f_central);
	printf("f = %lf\t dphi = %lf\n", f, dphi);
	printf("-------------------------------------------\n");
	printf("chislo_perehodov = %d\n", chislo_perehodov);

}
